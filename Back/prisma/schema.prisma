// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// User table
model User {
  user_id       Int       @id @default(autoincrement())
  userName     String
  password     String
  fname        String
  lname        String
  email        String
  address      String
  phoneNumber  String
  order        Order[]
}

// Order table
model Order {
  order_id              Int             @id @default(autoincrement())
  user                 User            @relation(fields: [user_id], references: [user_id],onDelete: Cascade,onUpdate: Cascade)
  user_id               Int             @unique
  foodItems            String
  deliveryAddress      String
  paymentMethod        PaymentMethod   @relation(fields: [paymentMethod_id], references: [paymentMethod_id],onDelete: Cascade,onUpdate: Cascade)
  paymentMethod_id      Int
  orderStatus          String
  deliveryOption       DeliveryOption  @relation(fields: [deliveryOption_id], references: [deliveryOption_id],onDelete: Cascade,onUpdate: Cascade)
  deliveryOption_id     Int
  restaurant_id         Restaurant[]
  trackingstatus        TrackingStatus[]

}

// PaymentMethods table
model PaymentMethod {
  paymentMethod_id    Int     @id @default(autoincrement())
  paymentMethodName  String
  details            String
  order              Order[]
}

// DeliveryOptions table
model DeliveryOption {
  deliveryOption_id    Int     @id @default(autoincrement())
  deliveryOptionName  String
  serviceFee          Float
  order              Order[]
}

// Restaurant table
model Restaurant {
  restaurant_id   Int       @id @default(autoincrement())
  restaurantName String
  lname          String
  address        String
  contactNumber  String
  foodType       String
  order          Order     @relation(fields: [order_id], references: [order_id],onDelete: Cascade,onUpdate: Cascade)
  order_id        Int
  menu            Menu[]
  review          Review[]
}

// Menu table
model Menu {
  menu_id        Int         @id @default(autoincrement())
  restaurant    Restaurant  @relation(fields: [restaurantI_id], references: [restaurant_id],onDelete: Cascade,onUpdate: Cascade)
  restaurantI_id Int
  menuName      String
  description   String
  price         Float
}

// TrackingStatus table
model TrackingStatus {
  trackingStatusID  Int      @id @default(autoincrement())
  order             Order    @relation(fields: [order_id], references: [order_id],onDelete: Cascade,onUpdate: Cascade)
  order_id           Int
  deliveryStatus    String
  dateTime          DateTime
}

// Reviews table
model Review {
  review_id      Int         @id @default(autoincrement())
  restaurant    Restaurant  @relation(fields: [restaurant_id], references: [restaurant_id],onDelete: Cascade,onUpdate: Cascade)
  restaurant_id  Int
  rating        Int
  comment       String
}

